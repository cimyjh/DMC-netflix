buildscript {
    ext {
        springBootVersion = '2.0.7.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'java'
//	id 'com.google.cloud.tools.jib' version '1.6.0'

    id 'com.palantir.docker' version '0.22.1'

}


ext['springCloudVersion'] = 'Finchley.SR2'

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'dmc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'  // To use Feign
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client' // 3. To use Eureka client
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'  // 2. To use ribbon
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix' // 1. To use spring-cloud-hystrix
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.retry:spring-retry:1.2.2.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-mustache'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.2'
//    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    compileOnly 'org.projectlombok:lombok:1.18.12'
//    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'


}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}



def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
//querydsl 추가 끝


ext {
    set('snippetsDir', file("build/generated-snippets"))
    BUILD_VERSION = new Date().format("yyyyMMddHHmmss") // 빌드한 시간을 Image Tag 로 표시하기 위하여 사용한다.
}

docker {
    name "dmc/fundtrue"
    tags "${project.version}", "${BUILD_VERSION}"
    files tasks.bootJar.outputs.files
    buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
}